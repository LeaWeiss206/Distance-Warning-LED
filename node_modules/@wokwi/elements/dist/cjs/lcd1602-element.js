"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const lit_element_1 = require("lit-element");
const lcd1602_font_a00_1 = require("./lcd1602-font-a00");
const ROWS = 2;
const COLS = 16;
const charXSpacing = 3.55;
const charYSpacing = 5.95;
const backgroundColors = {
    green: '#6cb201',
    blue: '#000eff',
};
let LCD1602Element = class LCD1602Element extends lit_element_1.LitElement {
    constructor() {
        super(...arguments);
        this.color = 'black';
        this.background = 'green';
        this.characters = new Uint8Array(32);
        this.font = lcd1602_font_a00_1.fontA00;
        this.cursor = false;
        this.blink = false;
        this.cursorX = 0;
        this.cursorY = 0;
        this.backlight = true;
    }
    static get styles() {
        return lit_element_1.css `
      .cursor-blink {
        animation: cursor-blink;
      }

      @keyframes cursor-blink {
        from {
          opacity: 0;
        }
        25% {
          opacity: 1;
        }
        75% {
          opacity: 1;
        }
        to {
          opacity: 0;
        }
      }
    `;
    }
    path(characters) {
        const xSpacing = 0.6;
        const ySpacing = 0.7;
        const result = [];
        for (let i = 0; i < characters.length; i++) {
            const charX = (i % COLS) * charXSpacing;
            const charY = Math.floor(i / COLS) * charYSpacing;
            for (let py = 0; py < 8; py++) {
                const row = this.font[characters[i] * 8 + py];
                for (let px = 0; px < 5; px++) {
                    if (row & (1 << px)) {
                        const x = (charX + px * xSpacing).toFixed(2);
                        const y = (charY + py * ySpacing).toFixed(2);
                        result.push(`M ${x} ${y}h0.55v0.65h-0.55Z`);
                    }
                }
            }
        }
        return result.join(' ');
    }
    renderCursor() {
        const xOffset = 12.45 + this.cursorX * charXSpacing;
        const yOffset = 12.55 + this.cursorY * charYSpacing;
        if (this.cursorX < 0 || this.cursorX >= COLS || this.cursorY < 0 || this.cursorY >= ROWS) {
            return null;
        }
        const result = [];
        if (this.blink) {
            result.push(lit_element_1.svg `
        <rect x="${xOffset}" y="${yOffset}" width="2.95" height="5.55" fill="${this.color}">
          <animate
            attributeName="opacity"
            values="0;0;0;0;1;1;0;0;0;0"
            dur="1s"
            fill="freeze"
            repeatCount="indefinite"
          />
        </rect>
      `);
        }
        if (this.cursor) {
            const y = yOffset + 0.7 * 7;
            result.push(lit_element_1.svg `<rect x="${xOffset}" y="${y}" width="2.95" height="0.65" fill="${this.color}" />`);
        }
        return result;
    }
    render() {
        const { color, characters, background } = this;
        const darken = this.backlight ? 0 : 0.5;
        const actualBgColor = background in backgroundColors ? backgroundColors[background] : backgroundColors;
        // Dimensions according to:
        // https://www.winstar.com.tw/products/character-lcd-display-module/16x2-lcd.html
        return lit_element_1.html `
      <svg
        width="80mm"
        height="36mm"
        version="1.1"
        viewBox="0 0 80 36"
        xmlns="http://www.w3.org/2000/svg"
      >
        <defs>
          <pattern
            id="characters"
            width="3.55"
            height="5.95"
            patternUnits="userSpaceOnUse"
            x="12.45"
            y="12.55"
          >
            <rect width="2.95" height="5.55" fill-opacity="0.05" />
          </pattern>
        </defs>
        <rect width="80" height="36" fill="#087f45" />
        <rect x="4.95" y="5.7" width="71.2" height="25.2" />
        <rect x="7.55" y="10.3" width="66" height="16" rx="1.5" ry="1.5" fill="${actualBgColor}" />
        <rect x="7.55" y="10.3" width="66" height="16" rx="1.5" ry="1.5" opacity="${darken}" />
        <rect x="12.45" y="12.55" width="56.2" height="11.5" fill="url(#characters)" />
        <path d="${this.path(characters)}" transform="translate(12.45, 12.55)" fill="${color}" />
        ${this.renderCursor()}
      </svg>
    `;
    }
};
__decorate([
    lit_element_1.property()
], LCD1602Element.prototype, "color", void 0);
__decorate([
    lit_element_1.property()
], LCD1602Element.prototype, "background", void 0);
__decorate([
    lit_element_1.property({ type: Array })
], LCD1602Element.prototype, "characters", void 0);
__decorate([
    lit_element_1.property()
], LCD1602Element.prototype, "font", void 0);
__decorate([
    lit_element_1.property()
], LCD1602Element.prototype, "cursor", void 0);
__decorate([
    lit_element_1.property()
], LCD1602Element.prototype, "blink", void 0);
__decorate([
    lit_element_1.property()
], LCD1602Element.prototype, "cursorX", void 0);
__decorate([
    lit_element_1.property()
], LCD1602Element.prototype, "cursorY", void 0);
__decorate([
    lit_element_1.property()
], LCD1602Element.prototype, "backlight", void 0);
LCD1602Element = __decorate([
    lit_element_1.customElement('wokwi-lcd1602')
], LCD1602Element);
exports.LCD1602Element = LCD1602Element;
